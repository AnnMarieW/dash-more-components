{
  "src/lib/components/Clipboard.react.js": {
    "description": "The Clipboard component copies text to the clipboard",
    "displayName": "Clipboard",
    "methods": [
      {
        "name": "copySuccess",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getText",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "copyToClipboard",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component."
      },
      "target_id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "id of component containing text to copy to the clipboard.\n The inner text of the children will be copied to the clipboard.  If none, then the text from the\n value property will be copied."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/CreditCard.react.js": {
    "description": "CreditCard component provides Beautiful credit cards for your payment forms\nSee react component here: https://github.com/amarofashion/react-credit-cards",
    "displayName": "CreditCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "cvc": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSV on credit card."
      },
      "expiry": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "expiry date on credit card."
      },
      "focus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "focus on credit card entry"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name as it appears on credit card"
      },
      "number": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "account number credit card"
      },
      "locale": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "localization text - like the words 'valid thru' on card"
      }
    }
  },
  "src/lib/components/Geolocation.react.js": {
    "description": "The CurrentLocation component gets geolocation of the device from the web browser.  See more info here:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API",
    "displayName": "Geolocation",
    "methods": [
      {
        "name": "updatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "success",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "pos",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "error",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "err",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "local_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The local date and time when the device position was updated.\nFormat:  MM/DD/YYYY, hh:mm:ss p   where p is AM or PM"
      },
      "timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The Unix timestamp in seconds from when the position was updated"
      },
      "position": {
        "type": {
          "name": "shape",
          "value": {
            "lat": {
              "name": "number",
              "required": false
            },
            "lon": {
              "name": "number",
              "required": false
            },
            "accuracy": {
              "name": "number",
              "required": false
            },
            "alt": {
              "name": "number",
              "required": false
            },
            "altAccuracy": {
              "name": "number",
              "required": false
            },
            "heading": {
              "name": "number",
              "required": false
            },
            "speed": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "(dict)The position of the device.  Lat, lon, and accuracy will always be returned.  The other data will be included\nwhen available, otherwise it will be NaN.\nA dictionary with the following keys:\n      lat:  latitude in degrees,\n      lon: longitude in degrees,\n      accuracy: accuracy of the lat/lon in meters,\n\n      When available:\n      alt:  altitude above mean sea level in meters,\n      altAccuracy:  accuracy of the altitude  in meters,\n      heading: compass heading in degrees,\n      speed:  speed in meters per sec,"
      },
      "position_error": {
        "type": {
          "name": "shape",
          "value": {
            "code": {
              "name": "number",
              "required": false
            },
            "message": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Position error",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "show_alert": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, error messages will be displayed as an alert",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "watch_position": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(boolean; default False).  If false, position is obtained as an asynchronous request.  If true, then  position data\nis updated when either the location changes or more accurate information becomes available",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "update_now": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(boolean; default False).  Forces a one-time update to the position data.   If set to True in a callback, the browser\n  will update the position data and reset update_now back to False.  This can, for example, be used to update the\n position with a button or an interval timer.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "high_accuracy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(boolean; default False).   If true and if the device is able to provide a more accurate position,\n it will do so. Note that this can result in slower response times or increased power consumption (with a GPS\n chip on a mobile device for example). If false (the default value), the device can save resources by\n responding more quickly and/or using less power.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maximum_age": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0,\nit means that the device cannot use a cached position and must attempt to retrieve the real current position.\nIf set to Infinity the device must return a cached position regardless of its age. Default: 0.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "timeout": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum length of time (in milliseconds) the device is allowed to take in order to return a position.\nThe default value is Infinity, meaning that data will not be return until the position is available.",
        "defaultValue": {
          "value": "Infinity",
          "computed": true
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Timepicker.react.js": {
    "description": "TODO:  Remove https://github.com/arqex/react-datetime - it takes a lot of space. \n\n           necessary to add className?  if sim test array of strings - classname\n           how to use{...}  ?\n           necessary to specify all vars in div in return?",
    "displayName": "Timepicker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "value is the selected time"
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input format based on Unicode Technical Standard #35. Supported values are: H, HH, h, hh, m, mm, s, ss, a.\n     example: h:m:s a"
      },
      "maxDetail": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'hour'",
              "computed": false
            },
            {
              "value": "'minute'",
              "computed": false
            },
            {
              "value": "'second'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "(string, one of 'hour', 'minute', 'second, Default: 'minute')\n  The level of detail to show on the time picker."
      },
      "maxTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Maximum time the user can select"
      },
      "minTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Minimum time the user can select"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time picker should be disables"
      },
      "disableClock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When set to true will remove the clock and the button toggling its visibility"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Locale that should be used by the time picker and the clock.  Can be any\nIEFE language tag. https://en.wikipedia.org/wiki/IETF_language_tag\nDefault from User's browser settings."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Timer.react.js": {
    "description": "A component that repeatedly increments a counter `n_intervals`\nwith a fixed time delay between each increment.\nInterval is good for triggering a component on a recurring basis.\nThe time delay is set with the property \"interval\" in milliseconds.",
    "displayName": "Timer",
    "methods": [
      {
        "name": "handleTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMessages",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          },
          {
            "name": "new_timer",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "reportInterval",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "initTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "resetTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "clearTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "interval": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This component will increment the counter `n_intervals` every\n`interval` milliseconds",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, the n_interval counter  and the timer no longer updates.  This pauses the timer."
      },
      "n_intervals": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of times the interval has passed (read-only)",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "max_intervals": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of times the interval will be fired.\nIf -1, then the interval has no limit (the default)\nand if 0 then the interval stops running.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "timer": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When in countdown mode, the timer will count down to zero from the starting `duration` and will show the number\n of milliseconds remaining.\n When in stopwatch mode, the timer will count up from zero and show the number of milliseconds elapsed.\n (read-only)",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "mode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'stopwatch'",
              "computed": false
            },
            {
              "value": "'countdown'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The timer will count down to zero in `countdown` mode and count up from zero in `stopwatch` mode",
        "defaultValue": {
          "value": "'countdown'",
          "computed": false
        }
      },
      "duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets the number of milliseconds the timer will run.  If -1 the timer will not be limited by the duration. (the default)\nand if 0 then the timer stops running.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "reset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "This will start the timer at the beginning with the given prop settings.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "fire": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "A list of the time(s) in milliseconds at which to fire a callback. This can be used to start a task at a given\ntime rather than using the timer. Since the timer is typically set at a small interval like one second, using\nfire can reduce the number of times a callback is fired and can increase app performance. The time(s) must be a\nmultiple of the interval.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "at_fire_interval": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This number is updated when the timer reaches an interval in the fire property. (Read only)",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "rerun": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When True, the timer repeats once the timer has run for the number of milliseconds set in the duration.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "messages": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Timer messages to be displayed by the component rather than showing the timer. It is a dictionary in the form of:\n{integer: string} where integer is the time in milliseconds of when the string message is to be displayed.\nNote: timer_format will override messages. For example, {10000 : \"updating in 10 seconds\"} will display the message\n\"updating in 10 seconds\" once the timer equals 10000.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "timer_format": {
        "type": {
          "name": "exact",
          "value": {
            "display": {
              "name": "bool",
              "description": "If False, then no timer will be displayed. Timer messages will be displayed (if any). If True, for example,\n1337000000 milliseconds will display as: '15d 11h 23m 20s' (the default format)",
              "required": false
            },
            "compact": {
              "name": "bool",
              "description": "Shows a compact timer display.  default: False\nIf True, it will only show the first unit: 1h 10m \u2192 1h.",
              "required": false
            },
            "verbose": {
              "name": "bool",
              "description": "Verbose will display full-length units. default: False\n Example - if true: 5h 1m 45s \u2192 5 hours 1 minute 45 seconds",
              "required": false
            },
            "colonNotation": {
              "name": "bool",
              "description": "Display time in a colon notation. Useful when you want to display time without the time units, similar to\na digital watch. Will always shows time in at least minutes: 1s \u2192 0:01.  Example - 5h 1m 45s \u2192 5:01:45.",
              "required": false
            }
          }
        },
        "required": false,
        "description": "If a timer is displayed, it will override timer `messages`.  This formats the timer (milliseconds) into human\nreadable formats.  For example: 1337000000 milliseconds will display the default format: '15d 11h 23m 20s'."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash assigned callback"
      }
    }
  }
}