{
  "src/lib/components/CountdownTimer.react.js": {
    "description": "This component is a countdown timer.  The starting duration and\n    remaining duration are in seconds",
    "displayName": "CountdownTimer",
    "methods": [
      {
        "name": "handleTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "resetTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "clearTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "reportInterval",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "starting_duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time to count down in seconds",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "pause": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, the counter will no longer update. If False, the timer will resume.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "remaining_duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "remaining time left on countdown timer in seconds",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash assigned callback"
      }
    }
  },
  "src/lib/components/CreditCard.react.js": {
    "description": "CreditCard component provides Beautiful credit cards for your payment forms\nSee react component here: https://github.com/amarofashion/react-credit-cards",
    "displayName": "CreditCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "cvc": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSV on credit card."
      },
      "expiry": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "expiry date on credit card."
      },
      "focus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "focus on credit card entry"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name as it appears on credit card"
      },
      "number": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "account number credit card"
      },
      "locale": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "localization text - like the words 'valid thru' on card"
      }
    }
  },
  "src/lib/components/Datetimepicker.react.js": {
    "description": "TODO:  more checking for valid dates.",
    "displayName": "Datetimepicker",
    "methods": [
      {
        "name": "convertDate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "value is the selected datetime.   type:  datetime objec"
      },
      "setValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "string value of date.  from app. need to convert to datetime object"
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input format based on Unicode Technical Standard #35.  This changes how the date and time is displayed.\nSupported values are: y, M, MM, MMM, MMMM, d, dd, H, HH, h, hh, m, mm, s, ss, a\n     \n     example:  y-MM-dd h:mm:ss a   isodate:y-MM-dd HH:mm:ss"
      },
      "maxDetail": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'hour'",
              "computed": false
            },
            {
              "value": "'minute'",
              "computed": false
            },
            {
              "value": "'second'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "(string, one of 'hour', 'minute', 'second, Default: 'minute')\n  The level of detail to show on the datetime picker. View defined here also becomes the one on which\n  clicking an item in the calendar will select a date."
      },
      "minDetail": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"month\"",
              "computed": false
            },
            {
              "value": "\"year\"",
              "computed": false
            },
            {
              "value": "\"decade\"",
              "computed": false
            },
            {
              "value": "\"century\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The least detailed calendar view that the user shall see."
      },
      "maxTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Maximum time the user can select"
      },
      "minTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Minimum time the user can select"
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Maximum date that the user can select. Periods partially overlapped by maxDate will also be selectable,\nalthough React-DateTime-Picker will ensure that no later date is selected."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Minimum date that the user can select. Periods partially overlapped by minDate will also be selectable,\nalthough React-DateTime-Picker will ensure that no earlier date is selected."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time picker should be disables"
      },
      "disableClock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When set to true will remove the clock and the button toggling its visibility"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Locale that should be used by the time picker and the clock.  Can be any\nIEFE language tag. https://en.wikipedia.org/wiki/IETF_language_tag\nDefault from User's browser settings."
      },
      "returnValue": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"start\"",
              "computed": false
            },
            {
              "value": "\"end\"",
              "computed": false
            },
            {
              "value": "\"range\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Which dates shall be passed by the calendar to the onChange function and onClick{Period} functions.\nCan be \"start\", \"end\" or \"range\". The latter will cause an array with start and end values to be passed."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Geolocation.react.js": {
    "description": "The CurrentLocation component gets geolocation of the device from the web browser.  See more info here:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API",
    "displayName": "Geolocation",
    "methods": [
      {
        "name": "updatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "success",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "pos",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "error",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "err",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "local_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The local date and time when the device position was updated.\nFormat:  MM/DD/YYYY, hh:mm:ss p   where p is AM or PM"
      },
      "timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The Unix timestamp in seconds from when the position was updated"
      },
      "position": {
        "type": {
          "name": "shape",
          "value": {
            "lat": {
              "name": "number",
              "required": false
            },
            "lon": {
              "name": "number",
              "required": false
            },
            "accuracy": {
              "name": "number",
              "required": false
            },
            "alt": {
              "name": "number",
              "required": false
            },
            "altAccuracy": {
              "name": "number",
              "required": false
            },
            "heading": {
              "name": "number",
              "required": false
            },
            "speed": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "(dict)The position of the device.  Lat, lon, and accuracy will always be returned.  The other data will be included\nwhen available, otherwise it will be NaN.\nA dictionary with the following keys:\n      lat:  latitude in degrees,\n      lon: longitude in degrees,\n      accuracy: accuracy of the lat/lon in meters,\n\n      When available:\n      alt:  altitude above mean sea level in meters,\n      altAccuracy:  accuracy of the altitude  in meters,\n      heading: compass heading in degrees,\n      speed:  speed in meters per sec,"
      },
      "position_error": {
        "type": {
          "name": "shape",
          "value": {
            "code": {
              "name": "number",
              "required": false
            },
            "message": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Position error",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "show_alert": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, error messages will be displayed as an alert",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "watch_position": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(boolean; default False).  If false, position is obtained as an asynchronous request.  If true, then  position data\nis updated when either the location changes or more accurate information becomes available",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "update_now": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(boolean; default False).  Forces a one-time update to the position data.   If set to True in a callback, the browser\n  will update the position data and reset update_now back to False.  This can, for example, be used to update the\n position with a button or an interval timer.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "high_accuracy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(boolean; default False).   If true and if the device is able to provide a more accurate position,\n it will do so. Note that this can result in slower response times or increased power consumption (with a GPS\n chip on a mobile device for example). If false (the default value), the device can save resources by\n responding more quickly and/or using less power.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maximum_age": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0,\nit means that the device cannot use a cached position and must attempt to retrieve the real current position.\nIf set to Infinity the device must return a cached position regardless of its age. Default: 0.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "timeout": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum length of time (in milliseconds) the device is allowed to take in order to return a position.\nThe default value is Infinity, meaning that data will not be return until the position is available.",
        "defaultValue": {
          "value": "Infinity",
          "computed": true
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Timepicker.react.js": {
    "description": "TODO:  Remove https://github.com/arqex/react-datetime - it takes a lot of space. \n\n           necessary to add className?  if sim test array of strings - classname\n           how to use{...}  ?\n           necessary to specify all vars in div in return?",
    "displayName": "Timepicker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "value is the selected time"
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input format based on Unicode Technical Standard #35. Supported values are: H, HH, h, hh, m, mm, s, ss, a.\n     example: h:m:s a"
      },
      "maxDetail": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'hour'",
              "computed": false
            },
            {
              "value": "'minute'",
              "computed": false
            },
            {
              "value": "'second'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "(string, one of 'hour', 'minute', 'second, Default: 'minute')\n  The level of detail to show on the time picker."
      },
      "maxTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Maximum time the user can select"
      },
      "minTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Minimum time the user can select"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time picker should be disables"
      },
      "disableClock": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When set to true will remove the clock and the button toggling its visibility"
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Locale that should be used by the time picker and the clock.  Can be any\nIEFE language tag. https://en.wikipedia.org/wiki/IETF_language_tag\nDefault from User's browser settings."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Timer.react.js": {
    "description": "A component that repeatedly increments a counter `n_intervals`\nwith a fixed time delay between each increment.\nInterval is good for triggering a component on a recurring basis.\nThe time delay is set with the property \"interval\" in milliseconds.",
    "displayName": "Timer",
    "methods": [
      {
        "name": "handleTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "initTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "resetTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "clearTimer",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "reportInterval",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "interval": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This component will increment the counter `n_intervals` every\n`interval` milliseconds",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, the n_interval counter  and the remaining_duration no longer updates.  This pauses the timer."
      },
      "n_intervals": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of times the interval has passed (read-only)",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "max_intervals": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of times the interval will be fired.\nIf -1, then the interval has no limit (the default)\nand if 0 then the interval stops running.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "remaining_duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of milliseconds remaining on the timer.  (read-only)",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "countdown_duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets the number of milliseconds the timer will run.  If -1 the duration has no limit (the default)\nand if 0 then the timer stops running.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "reset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "starts the timer at the beginning with the given prop settings.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash assigned callback"
      }
    }
  }
}